<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\demo.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\demo.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060960: Last Updated: Wed Sep 27 02:27:31 2023
<BR><P>
<H3>Maximum Stack Usage =        404 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
CAN1_RX0_IRQHandler &rArr; cop_isr &rArr; canDispatch &rArr; proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry &rArr; accessDictionaryError
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[2d]">ADC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">ADC_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[2d]">ADC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[15]">BusFault_Handler</a> from stm32f4xx_it.o(i.BusFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2f]">CAN1_RX0_IRQHandler</a> from main.o(i.CAN1_RX0_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[30]">CAN1_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[31]">CAN1_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2e]">CAN1_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5b]">CAN2_RX0_IRQHandler</a> from main.o(i.CAN2_RX0_IRQHandler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5c]">CAN2_RX1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5d]">CAN2_SCE_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5a]">CAN2_TX_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6a]">CRYP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[74]">ConsumerHeartbeatAlarm</a> from lifegrd.o(i.ConsumerHeartbeatAlarm) referenced from lifegrd.o(i.heartbeatInit)
 <LI><a href="#[74]">ConsumerHeartbeatAlarm</a> from lifegrd.o(i.ConsumerHeartbeatAlarm) referenced from lifegrd.o(i.proceedNODE_GUARD)
 <LI><a href="#[69]">DCMI_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[26]">DMA1_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[27]">DMA1_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[28]">DMA1_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[29]">DMA1_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2a]">DMA1_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2b]">DMA1_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[2c]">DMA1_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4a]">DMA1_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[53]">DMA2_Stream0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[54]">DMA2_Stream1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[55]">DMA2_Stream2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[56]">DMA2_Stream3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[57]">DMA2_Stream4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5f]">DMA2_Stream5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[60]">DMA2_Stream6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[61]">DMA2_Stream7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[18]">DebugMon_Handler</a> from stm32f4xx_it.o(i.DebugMon_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[58]">ETH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[59]">ETH_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[21]">EXTI0_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[43]">EXTI15_10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[22]">EXTI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[23]">EXTI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[24]">EXTI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[25]">EXTI4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[32]">EXTI9_5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1f]">FLASH_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6c]">FPU_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4b]">FSMC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[78]">GuardTimeAlarm</a> from lifegrd.o(i.GuardTimeAlarm) referenced from lifegrd.o(i.nodeguardInit)
 <LI><a href="#[6b]">HASH_RNG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[13]">HardFault_Handler</a> from stm32f4xx_it.o(i.HardFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3b]">I2C1_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3a]">I2C1_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3d]">I2C2_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3c]">I2C2_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[64]">I2C3_ER_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[63]">I2C3_EV_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[14]">MemManage_Handler</a> from stm32f4xx_it.o(i.MemManage_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[12]">NMI_Handler</a> from stm32f4xx_it.o(i.NMI_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[5e]">OTG_FS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[45]">OTG_FS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[66]">OTG_HS_EP1_IN_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[65]">OTG_HS_EP1_OUT_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[68]">OTG_HS_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[67]">OTG_HS_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[7b]">OnCOB_ID_SyncUpdate</a> from sync.o(i.OnCOB_ID_SyncUpdate) referenced from sync.o(i.startSYNC)
 <LI><a href="#[73]">OnHeartbeatProducerUpdate</a> from lifegrd.o(i.OnHeartbeatProducerUpdate) referenced from lifegrd.o(i.heartbeatInit)
 <LI><a href="#[77]">OnNodeGuardUpdate</a> from lifegrd.o(i.OnNodeGuardUpdate) referenced from lifegrd.o(i.nodeguardInit)
 <LI><a href="#[72]">OnNumberOfErrorsUpdate</a> from emcy.o(i.OnNumberOfErrorsUpdate) referenced from emcy.o(i.emergencyInit)
 <LI><a href="#[79]">PDOEventTimerAlarm</a> from pdo.o(i.PDOEventTimerAlarm) referenced from pdo.o(i.sendOnePDOevent)
 <LI><a href="#[7a]">PDOInhibitTimerAlarm</a> from pdo.o(i.PDOInhibitTimerAlarm) referenced from pdo.o(i.sendOnePDOevent)
 <LI><a href="#[1c]">PVD_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[19]">PendSV_Handler</a> from stm32f4xx_it.o(i.PendSV_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[75]">ProducerHeartbeatAlarm</a> from lifegrd.o(i.ProducerHeartbeatAlarm) referenced from lifegrd.o(i.heartbeatInit)
 <LI><a href="#[20]">RCC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[44]">RTC_Alarm_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1e]">RTC_WKUP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[11]">Reset_Handler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4c]">SDIO_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[76]">SDOTimeoutAlarm</a> from sdo.o(i.SDOTimeoutAlarm) referenced from sdo.o(i.initSDOline)
 <LI><a href="#[76]">SDOTimeoutAlarm</a> from sdo.o(i.SDOTimeoutAlarm) referenced 8 times from sdo.o(i.proceedSDO)
 <LI><a href="#[3e]">SPI1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[3f]">SPI2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4e]">SPI3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[17]">SVC_Handler</a> from stm32f4xx_it.o(i.SVC_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[10]">Servo_scanIndexOD</a> from slave.o(i.Servo_scanIndexOD) referenced 2 times from slave.o(.data)
 <LI><a href="#[f]">Servo_valueRangeTest</a> from slave.o(i.Servo_valueRangeTest) referenced 2 times from slave.o(.data)
 <LI><a href="#[7c]">SyncAlarm</a> from sync.o(i.SyncAlarm) referenced from sync.o(i.startSYNC)
 <LI><a href="#[1a]">SysTick_Handler</a> from main.o(i.$Sub$$SysTick_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[6e]">SystemInit</a> from system_stm32f4xx.o(i.SystemInit) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[1d]">TAMP_STAMP_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[33]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[36]">TIM1_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[35]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[34]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[37]">TIM2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[38]">TIM3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[39]">TIM4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[4d]">TIM5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[51]">TIM6_DAC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[52]">TIM7_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[46]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[49]">TIM8_CC_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[48]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[47]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[70]">TPDO_Communication_Parameter_Callback</a> from pdo.o(i.TPDO_Communication_Parameter_Callback) referenced from pdo.o(i.PDOInit)
 <LI><a href="#[4f]">UART4_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[50]">UART5_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[40]">USART1_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[41]">USART2_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[42]">USART3_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[62]">USART6_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[16]">UsageFault_Handler</a> from stm32f4xx_it.o(i.UsageFault_Handler) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[1b]">WWDG_IRQHandler</a> from startup_stm32f40_41xxx.o(.text) referenced from startup_stm32f40_41xxx.o(RESET)
 <LI><a href="#[0]">_RxPDO_EventTimers_Handler</a> from pdo.o(i._RxPDO_EventTimers_Handler) referenced 4 times from master.o(.data)
 <LI><a href="#[6f]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f40_41xxx.o(.text)
 <LI><a href="#[6]">_heartbeatError</a> from lifegrd.o(i._heartbeatError) referenced 4 times from master.o(.data)
 <LI><a href="#[2]">_initialisation</a> from states.o(i._initialisation) referenced 4 times from master.o(.data)
 <LI><a href="#[7]">_nodeguardError</a> from lifegrd.o(i._nodeguardError) referenced 4 times from master.o(.data)
 <LI><a href="#[4]">_operational</a> from states.o(i._operational) referenced 4 times from master.o(.data)
 <LI><a href="#[a]">_post_SlaveBootup</a> from lifegrd.o(i._post_SlaveBootup) referenced 4 times from master.o(.data)
 <LI><a href="#[b]">_post_SlaveStateChange</a> from lifegrd.o(i._post_SlaveStateChange) referenced 4 times from master.o(.data)
 <LI><a href="#[9]">_post_TPDO</a> from sync.o(i._post_TPDO) referenced 4 times from master.o(.data)
 <LI><a href="#[e]">_post_emcy</a> from emcy.o(i._post_emcy) referenced 4 times from master.o(.data)
 <LI><a href="#[8]">_post_sync</a> from sync.o(i._post_sync) referenced 4 times from master.o(.data)
 <LI><a href="#[3]">_preOperational</a> from states.o(i._preOperational) referenced 4 times from master.o(.data)
 <LI><a href="#[5]">_stopped</a> from states.o(i._stopped) referenced 4 times from master.o(.data)
 <LI><a href="#[d]">_storeODSubIndex</a> from objacces.o(i._storeODSubIndex) referenced 4 times from master.o(.data)
 <LI><a href="#[80]">display_build_time</a> from buildtime.o(i.display_build_time) referenced from buildtime.o(.usdk.init2)
 <LI><a href="#[71]">fputc</a> from rs232.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[7e]">key_init</a> from key.o(i.key_init) referenced from key.o(.usdk.init1)
 <LI><a href="#[7f]">led_init</a> from led.o(i.led_init) referenced from led.o(.usdk.init1)
 <LI><a href="#[6d]">main</a> from autoinit.o(i.$Sub$$main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[c]">master_scanIndexOD</a> from master.o(i.master_scanIndexOD) referenced 2 times from master.o(.data)
 <LI><a href="#[1]">master_valueRangeTest</a> from master.o(i.master_valueRangeTest) referenced 2 times from master.o(.data)
 <LI><a href="#[7d]">system_begin</a> from autoinit.o(i.system_begin) referenced from autoinit.o(.usdk.init0)
 <LI><a href="#[81]">system_end</a> from autoinit.o(i.system_end) referenced from autoinit.o(.usdk.init9)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[6f]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[f3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[82]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[87]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[f4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[f5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[f6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[f7]"></a>__rt_lib_shutdown_fini</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry12b.o(.ARM.Collect$$$$0000000E))

<P><STRONG><a name="[f8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[f9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$00000011))

<P><STRONG><a name="[11]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>ADC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>CRYP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>DCMI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DMA1_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>DMA1_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>DMA1_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>DMA1_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>DMA1_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>DMA1_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DMA1_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>DMA1_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA2_Stream0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA2_Stream1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA2_Stream2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA2_Stream3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA2_Stream4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>DMA2_Stream5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>DMA2_Stream6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>DMA2_Stream7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>ETH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>ETH_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>HASH_RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>OTG_FS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>OTG_HS_EP1_IN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>OTG_HS_EP1_OUT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>OTG_HS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>OTG_HS_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>RTC_Alarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>RTC_WKUP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>TAMP_STAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f40_41xxx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ad]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cop_isr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>

<P><STRONG><a name="[d5]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_build_time
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[d6]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_build_time
</UL>

<P><STRONG><a name="[eb]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>

<P><STRONG><a name="[84]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[83]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[fb]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[86]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[fc]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[85]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>

<P><STRONG><a name="[fd]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[ff]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1a]"></a>SysTick_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, main.o(i.$Sub$$SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SysTick_Handler &rArr; TimeDispatch &rArr; getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>main</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, autoinit.o(i.$Sub$$main))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = main &rArr; $Super$$main &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usdk_startup
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[15]"></a>BusFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.BusFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>CAN1_RX0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.CAN1_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = CAN1_RX0_IRQHandler &rArr; cop_isr &rArr; canDispatch &rArr; proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cop_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, main.o(i.CAN2_RX0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = CAN2_RX0_IRQHandler &rArr; cop_isr &rArr; canDispatch &rArr; proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cop_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[ca]"></a>CAN_FilterInit</STRONG> (Thumb, 258 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_FilterInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_FilterInit
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
</UL>

<P><STRONG><a name="[cc]"></a>CAN_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_can.o(i.CAN_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
</UL>

<P><STRONG><a name="[c9]"></a>CAN_Init</STRONG> (Thumb, 276 bytes, Stack size 12 bytes, stm32f4xx_can.o(i.CAN_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CAN_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
</UL>

<P><STRONG><a name="[cd]"></a>CAN_Receive</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cop_isr
</UL>

<P><STRONG><a name="[c2]"></a>CAN_Transmit</STRONG> (Thumb, 294 bytes, Stack size 8 bytes, stm32f4xx_can.o(i.CAN_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CAN_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>

<P><STRONG><a name="[74]"></a>ConsumerHeartbeatAlarm</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lifegrd.o(i.ConsumerHeartbeatAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ConsumerHeartbeatAlarm
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lifegrd.o(i.heartbeatInit)
<LI> lifegrd.o(i.proceedNODE_GUARD)
</UL>
<P><STRONG><a name="[b9]"></a>CopyBits</STRONG> (Thumb, 236 bytes, Stack size 52 bytes, pdo.o(i.CopyBits))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = CopyBits
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
</UL>

<P><STRONG><a name="[18]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[91]"></a>DelAlarm</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, timer.o(i.DelAlarm))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardStop
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProducerHeartbeatAlarm
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuardTimeAlarm
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDO_Communication_Parameter_Callback
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOStop
</UL>

<P><STRONG><a name="[8e]"></a>DelayInit</STRONG> (Thumb, 86 bytes, Stack size 32 bytes, sleep.o(i.DelayInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = DelayInit &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[e0]"></a>DelayNonBlock</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, sleep.o(i.DelayNonBlock))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[c7]"></a>GPIO_Init</STRONG> (Thumb, 144 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
</UL>

<P><STRONG><a name="[c6]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, stm32f4xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
</UL>

<P><STRONG><a name="[da]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_tgl
</UL>

<P><STRONG><a name="[d8]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f4xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_tgl
</UL>

<P><STRONG><a name="[b4]"></a>GetSDOClientFromNodeId</STRONG> (Thumb, 84 bytes, Stack size 20 bytes, sdo.o(i.GetSDOClientFromNodeId))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GetSDOClientFromNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>

<P><STRONG><a name="[78]"></a>GuardTimeAlarm</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lifegrd.o(i.GuardTimeAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = GuardTimeAlarm &rArr; masterSendNMTnodeguard &rArr; canSend &rArr; can_display_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTnodeguard
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(i.nodeguardInit)
</UL>
<P><STRONG><a name="[d4]"></a>HAL_DeltaTick</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sleep.o(i.HAL_DeltaTick))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
</UL>

<P><STRONG><a name="[89]"></a>HAL_GetTick</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sleep.o(i.HAL_GetTick))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[a6]"></a>HAL_IncTick</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sleep.o(i.HAL_IncTick))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$SysTick_Handler
</UL>

<P><STRONG><a name="[13]"></a>HardFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.HardFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>MemManage_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.MemManage_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[cb]"></a>NVIC_Init</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
</UL>

<P><STRONG><a name="[dd]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[7b]"></a>OnCOB_ID_SyncUpdate</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, sync.o(i.OnCOB_ID_SyncUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OnCOB_ID_SyncUpdate &rArr; startSYNC &rArr; stopSYNC &rArr; RegisterSetODentryCallBack &rArr; scanIndexOD
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sync.o(i.startSYNC)
</UL>
<P><STRONG><a name="[73]"></a>OnHeartbeatProducerUpdate</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lifegrd.o(i.OnHeartbeatProducerUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OnHeartbeatProducerUpdate &rArr; heartbeatInit &rArr; SetAlarm &rArr; getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(i.heartbeatInit)
</UL>
<P><STRONG><a name="[77]"></a>OnNodeGuardUpdate</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lifegrd.o(i.OnNodeGuardUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = OnNodeGuardUpdate &rArr; nodeguardInit &rArr; SetAlarm &rArr; getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardStop
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(i.nodeguardInit)
</UL>
<P><STRONG><a name="[72]"></a>OnNumberOfErrorsUpdate</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, emcy.o(i.OnNumberOfErrorsUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = OnNumberOfErrorsUpdate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> emcy.o(i.emergencyInit)
</UL>
<P><STRONG><a name="[79]"></a>PDOEventTimerAlarm</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pdo.o(i.PDOEventTimerAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TPDO_Communication_Parameter_Callback
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdo.o(i.sendOnePDOevent)
</UL>
<P><STRONG><a name="[7a]"></a>PDOInhibitTimerAlarm</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, pdo.o(i.PDOInhibitTimerAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = PDOInhibitTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdo.o(i.sendOnePDOevent)
</UL>
<P><STRONG><a name="[98]"></a>PDOInit</STRONG> (Thumb, 82 bytes, Stack size 32 bytes, pdo.o(i.PDOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanIndexOD
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[9b]"></a>PDOStop</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, pdo.o(i.PDOStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PDOStop
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[19]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>ProducerHeartbeatAlarm</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lifegrd.o(i.ProducerHeartbeatAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ProducerHeartbeatAlarm &rArr; canSend &rArr; can_display_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lifegrd.o(i.heartbeatInit)
</UL>
<P><STRONG><a name="[c5]"></a>RCC_AHB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_AHB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;key_init
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
</UL>

<P><STRONG><a name="[c8]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
</UL>

<P><STRONG><a name="[e9]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_init
</UL>

<P><STRONG><a name="[8f]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 214 bytes, Stack size 20 bytes, stm32f4xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayInit
</UL>

<P><STRONG><a name="[9d]"></a>RegisterSetODentryCallBack</STRONG> (Thumb, 54 bytes, Stack size 32 bytes, objacces.o(i.RegisterSetODentryCallBack))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RegisterSetODentryCallBack &rArr; scanIndexOD
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scanIndexOD
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
</UL>

<P><STRONG><a name="[76]"></a>SDOTimeoutAlarm</STRONG> (Thumb, 256 bytes, Stack size 32 bytes, sdo.o(i.SDOTimeoutAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SDOTimeoutAlarm &rArr; sendSDOabort &rArr; sendSDO &rArr; canSend &rArr; can_display_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDOabort
</UL>
<BR>[Address Reference Count : 2]<UL><LI> sdo.o(i.initSDOline)
<LI> sdo.o(i.proceedSDO)
</UL>
<P><STRONG><a name="[a0]"></a>SDOlineToObjdict</STRONG> (Thumb, 144 bytes, Stack size 40 bytes, sdo.o(i.SDOlineToObjdict))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = SDOlineToObjdict &rArr; _setODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[ce]"></a>SDOtoLine</STRONG> (Thumb, 114 bytes, Stack size 20 bytes, sdo.o(i.SDOtoLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SDOtoLine
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cop_isr
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[17]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>Servo_scanIndexOD</STRONG> (Thumb, 318 bytes, Stack size 16 bytes, slave.o(i.Servo_scanIndexOD))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Servo_scanIndexOD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slave.o(.data)
</UL>
<P><STRONG><a name="[f]"></a>Servo_valueRangeTest</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, slave.o(i.Servo_valueRangeTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = Servo_valueRangeTest
</UL>
<BR>[Address Reference Count : 1]<UL><LI> slave.o(.data)
</UL>
<P><STRONG><a name="[a2]"></a>SetAlarm</STRONG> (Thumb, 166 bytes, Stack size 40 bytes, timer.o(i.SetAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SetAlarm &rArr; getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
</UL>

<P><STRONG><a name="[7c]"></a>SyncAlarm</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sync.o(i.SyncAlarm))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = SyncAlarm &rArr; sendSYNC &rArr; proceedSYNC &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNC
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sync.o(i.startSYNC)
</UL>
<P><STRONG><a name="[88]"></a>$Super$$SysTick_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, stm32f4xx_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = $Super$$SysTick_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_IncTick
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[6e]"></a>SystemInit</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, system_stm32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(.text)
</UL>
<P><STRONG><a name="[70]"></a>TPDO_Communication_Parameter_Callback</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, pdo.o(i.TPDO_Communication_Parameter_Callback))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = TPDO_Communication_Parameter_Callback &rArr; PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pdo.o(i.PDOInit)
</UL>
<P><STRONG><a name="[8a]"></a>TimeDispatch</STRONG> (Thumb, 178 bytes, Stack size 24 bytes, timer.o(i.TimeDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TimeDispatch &rArr; getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTimer
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getElapsedTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[ea]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_init
</UL>

<P><STRONG><a name="[d3]"></a>USART_GetFlagStatus</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[a8]"></a>USART_Init</STRONG> (Thumb, 204 bytes, Stack size 48 bytes, stm32f4xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_init
</UL>

<P><STRONG><a name="[d2]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[16]"></a>UsageFault_Handler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f4xx_it.o(i.UsageFault_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f40_41xxx.o(RESET)
</UL>
<P><STRONG><a name="[0]"></a>_RxPDO_EventTimers_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, pdo.o(i._RxPDO_EventTimers_Handler))
<BR>[Address Reference Count : 2]<UL><LI> master.o(.data)
<LI> slave.o(.data)
</UL>
<P><STRONG><a name="[a9]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[100]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[c3]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usdk_startup
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_display_msg
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cop_isr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_build_time
</UL>

<P><STRONG><a name="[101]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[102]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[103]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[ab]"></a>_getODentry</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, objacces.o(i._getODentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accessDictionaryError
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objdictToSDOline
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
</UL>

<P><STRONG><a name="[6]"></a>_heartbeatError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lifegrd.o(i._heartbeatError))
<BR>[Address Reference Count : 2]<UL><LI> master.o(.data)
<LI> slave.o(.data)
</UL>
<P><STRONG><a name="[2]"></a>_initialisation</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, states.o(i._initialisation))
<BR>[Address Reference Count : 2]<UL><LI> master.o(.data)
<LI> slave.o(.data)
</UL>
<P><STRONG><a name="[7]"></a>_nodeguardError</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lifegrd.o(i._nodeguardError))
<BR>[Address Reference Count : 2]<UL><LI> master.o(.data)
<LI> slave.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>_operational</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, states.o(i._operational))
<BR>[Address Reference Count : 2]<UL><LI> master.o(.data)
<LI> slave.o(.data)
</UL>
<P><STRONG><a name="[a]"></a>_post_SlaveBootup</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lifegrd.o(i._post_SlaveBootup))
<BR>[Address Reference Count : 2]<UL><LI> master.o(.data)
<LI> slave.o(.data)
</UL>
<P><STRONG><a name="[b]"></a>_post_SlaveStateChange</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lifegrd.o(i._post_SlaveStateChange))
<BR>[Address Reference Count : 2]<UL><LI> master.o(.data)
<LI> slave.o(.data)
</UL>
<P><STRONG><a name="[9]"></a>_post_TPDO</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sync.o(i._post_TPDO))
<BR>[Address Reference Count : 2]<UL><LI> master.o(.data)
<LI> slave.o(.data)
</UL>
<P><STRONG><a name="[e]"></a>_post_emcy</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, emcy.o(i._post_emcy))
<BR>[Address Reference Count : 2]<UL><LI> master.o(.data)
<LI> slave.o(.data)
</UL>
<P><STRONG><a name="[8]"></a>_post_sync</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sync.o(i._post_sync))
<BR>[Address Reference Count : 2]<UL><LI> master.o(.data)
<LI> slave.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>_preOperational</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, states.o(i._preOperational))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _preOperational &rArr; masterSendNMTstateChange &rArr; canSend &rArr; can_display_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTstateChange
</UL>
<BR>[Address Reference Count : 2]<UL><LI> master.o(.data)
<LI> slave.o(.data)
</UL>
<P><STRONG><a name="[9a]"></a>_sendPDOevent</STRONG> (Thumb, 408 bytes, Stack size 48 bytes, pdo.o(i._sendPDOevent))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
</UL>

<P><STRONG><a name="[a1]"></a>_setODentry</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, objacces.o(i._setODentry))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = _setODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;accessDictionaryError
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOlineToObjdict
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
</UL>

<P><STRONG><a name="[5]"></a>_stopped</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, states.o(i._stopped))
<BR>[Address Reference Count : 2]<UL><LI> master.o(.data)
<LI> slave.o(.data)
</UL>
<P><STRONG><a name="[d]"></a>_storeODSubIndex</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, objacces.o(i._storeODSubIndex))
<BR>[Address Reference Count : 2]<UL><LI> master.o(.data)
<LI> slave.o(.data)
</UL>
<P><STRONG><a name="[b3]"></a>_writeNetworkDict</STRONG> (Thumb, 446 bytes, Stack size 72 bytes, sdo.o(i._writeNetworkDict))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _writeNetworkDict &rArr; sendSDO &rArr; canSend &rArr; can_display_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOfreeLine
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetSDOClientFromNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNetworkDict
</UL>

<P><STRONG><a name="[ac]"></a>accessDictionaryError</STRONG> (Thumb, 10 bytes, Stack size 12 bytes, objacces.o(i.accessDictionaryError))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = accessDictionaryError
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>

<P><STRONG><a name="[b1]"></a>buildPDO</STRONG> (Thumb, 242 bytes, Stack size 88 bytes, pdo.o(i.buildPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBits
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>

<P><STRONG><a name="[ba]"></a>canDispatch</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, states.o(i.canDispatch))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = canDispatch &rArr; proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedEMCY
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cop_isr
</UL>

<P><STRONG><a name="[9c]"></a>canSend</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, main.o(i.canSend))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = canSend &rArr; can_display_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_display_msg
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Transmit
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveSendBootUp
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTnodeguard
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNODE_GUARD
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ProducerHeartbeatAlarm
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;masterSendNMTstateChange
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNCMessage
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedPDO
</UL>

<P><STRONG><a name="[c1]"></a>can_display_msg</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, can.o(i.can_display_msg))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = can_display_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cop_isr
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>

<P><STRONG><a name="[c4]"></a>can_init</STRONG> (Thumb, 550 bytes, Stack size 32 bytes, can.o(i.can_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = can_init &rArr; GPIO_PinAFConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_ITConfig
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_FilterInit
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[8d]"></a>cop_isr</STRONG> (Thumb, 220 bytes, Stack size 56 bytes, main.o(i.cop_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = cop_isr &rArr; canDispatch &rArr; proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_display_msg
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOtoLine
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN_Receive
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN2_RX0_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CAN1_RX0_IRQHandler
</UL>

<P><STRONG><a name="[f2]"></a>dwt_init</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, sleep.o(i.dwt_init))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usdk_startup
</UL>

<P><STRONG><a name="[d0]"></a>emergencyInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, emcy.o(i.emergencyInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = emergencyInit &rArr; RegisterSetODentryCallBack &rArr; scanIndexOD
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[f0]"></a>emergencyStop</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, emcy.o(i.emergencyStop))
<BR><BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[d1]"></a>failedSDO</STRONG> (Thumb, 166 bytes, Stack size 48 bytes, sdo.o(i.failedSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = failedSDO &rArr; sendSDOabort &rArr; sendSDO &rArr; canSend &rArr; can_display_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDOabort
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[71]"></a>fputc</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, rs232.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[a3]"></a>getElapsedTime</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, main.o(i.getElapsedTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DeltaTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
</UL>

<P><STRONG><a name="[e3]"></a>getNodeId</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, states.o(i.getNodeId))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
</UL>

<P><STRONG><a name="[b6]"></a>getSDOfreeLine</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, sdo.o(i.getSDOfreeLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getSDOfreeLine
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>

<P><STRONG><a name="[b5]"></a>getSDOlineOnUse</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, sdo.o(i.getSDOlineOnUse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = getSDOlineOnUse
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>

<P><STRONG><a name="[e5]"></a>getSDOlineRestBytes</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, sdo.o(i.getSDOlineRestBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = getSDOlineRestBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[cf]"></a>get_build_time</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, buildtime.o(i.get_build_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_build_time &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;display_build_time
</UL>

<P><STRONG><a name="[94]"></a>heartbeatInit</STRONG> (Thumb, 130 bytes, Stack size 24 bytes, lifegrd.o(i.heartbeatInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = heartbeatInit &rArr; SetAlarm &rArr; getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardInit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnHeartbeatProducerUpdate
</UL>

<P><STRONG><a name="[93]"></a>heartbeatStop</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lifegrd.o(i.heartbeatStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = heartbeatStop
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardStop
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnHeartbeatProducerUpdate
</UL>

<P><STRONG><a name="[b7]"></a>initSDOline</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, sdo.o(i.initSDOline))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = initSDOline &rArr; SetAlarm &rArr; getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>

<P><STRONG><a name="[d7]"></a>led_off</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, led.o(i.led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_off
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[d9]"></a>led_tgl</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, led.o(i.led_tgl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_tgl
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>

<P><STRONG><a name="[db]"></a>lifeGuardInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lifegrd.o(i.lifeGuardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lifeGuardInit &rArr; nodeguardInit &rArr; SetAlarm &rArr; getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardInit
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[dc]"></a>lifeGuardStop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lifegrd.o(i.lifeGuardStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lifeGuardStop &rArr; heartbeatStop
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nodeguardStop
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heartbeatStop
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[e6]"></a>lineToSDO</STRONG> (Thumb, 148 bytes, Stack size 20 bytes, sdo.o(i.lineToSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lineToSDO
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[8c]"></a>$Super$$main</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = $Super$$main &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;writeNetworkDict
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNodeId
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_tgl
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;can_init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayNonBlock
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelayInit
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[90]"></a>masterSendNMTnodeguard</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, nmtmaster.o(i.masterSendNMTnodeguard))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = masterSendNMTnodeguard &rArr; canSend &rArr; can_display_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GuardTimeAlarm
</UL>

<P><STRONG><a name="[ae]"></a>masterSendNMTstateChange</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, nmtmaster.o(i.masterSendNMTstateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = masterSendNMTstateChange &rArr; canSend &rArr; can_display_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_preOperational
</UL>

<P><STRONG><a name="[c]"></a>master_scanIndexOD</STRONG> (Thumb, 96 bytes, Stack size 12 bytes, master.o(i.master_scanIndexOD))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = master_scanIndexOD
</UL>
<BR>[Address Reference Count : 1]<UL><LI> master.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>master_valueRangeTest</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, master.o(i.master_valueRangeTest))
<BR>[Address Reference Count : 1]<UL><LI> master.o(.data)
</UL>
<P><STRONG><a name="[96]"></a>nodeguardInit</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lifegrd.o(i.nodeguardInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = nodeguardInit &rArr; SetAlarm &rArr; getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardInit
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnNodeGuardUpdate
</UL>

<P><STRONG><a name="[95]"></a>nodeguardStop</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lifegrd.o(i.nodeguardStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = nodeguardStop
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardStop
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnNodeGuardUpdate
</UL>

<P><STRONG><a name="[e2]"></a>objdictToSDOline</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, sdo.o(i.objdictToSDOline))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = objdictToSDOline &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_getODentry
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[bc]"></a>proceedEMCY</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, emcy.o(i.proceedEMCY))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = proceedEMCY
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[c0]"></a>proceedNMTstateChange</STRONG> (Thumb, 224 bytes, Stack size 16 bytes, nmtslave.o(i.proceedNMTstateChange))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = proceedNMTstateChange &rArr; setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setNodeId
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[bf]"></a>proceedNODE_GUARD</STRONG> (Thumb, 276 bytes, Stack size 48 bytes, lifegrd.o(i.proceedNODE_GUARD))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = proceedNODE_GUARD &rArr; canSend &rArr; can_display_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[bd]"></a>proceedPDO</STRONG> (Thumb, 736 bytes, Stack size 88 bytes, pdo.o(i.proceedPDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = proceedPDO &rArr; PDOEventTimerAlarm &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setODentry
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CopyBits
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[be]"></a>proceedSDO</STRONG> (Thumb, 10024 bytes, Stack size 112 bytes, sdo.o(i.proceedSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = proceedSDO &rArr; failedSDO &rArr; sendSDOabort &rArr; sendSDO &rArr; canSend &rArr; can_display_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOtoLine
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setSDOlineRestBytes
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;objdictToSDOline
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lineToSDO
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineRestBytes
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOlineOnUse
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getSDOfreeLine
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOlineToObjdict
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
</UL>

<P><STRONG><a name="[bb]"></a>proceedSYNC</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sync.o(i.proceedSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = proceedSYNC &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canDispatch
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNC
</UL>

<P><STRONG><a name="[e7]"></a>resetSDO</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, sdo.o(i.resetSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = resetSDO &rArr; resetSDOline &rArr; initSDOline &rArr; SetAlarm &rArr; getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[9f]"></a>resetSDOline</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, sdo.o(i.resetSDOline))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = resetSDOline &rArr; initSDOline &rArr; SetAlarm &rArr; getElapsedTime
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initSDOline
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cop_isr
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDO
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOTimeoutAlarm
</UL>

<P><STRONG><a name="[e8]"></a>rs232_init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, rs232.o(i.rs232_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = rs232_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usdk_hw_uart_init
</UL>

<P><STRONG><a name="[99]"></a>scanIndexOD</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, objacces.o(i.scanIndexOD))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = scanIndexOD
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
</UL>

<P><STRONG><a name="[97]"></a>sendOnePDOevent</STRONG> (Thumb, 310 bytes, Stack size 40 bytes, pdo.o(i.sendOnePDOevent))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = sendOnePDOevent &rArr; buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendPdo
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;buildPDO
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInhibitTimerAlarm
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOEventTimerAlarm
</UL>

<P><STRONG><a name="[b8]"></a>sendSDO</STRONG> (Thumb, 162 bytes, Stack size 40 bytes, sdo.o(i.sendSDO))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = sendSDO &rArr; canSend &rArr; can_display_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDOabort
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>

<P><STRONG><a name="[9e]"></a>sendSDOabort</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, sdo.o(i.sendSDOabort))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = sendSDOabort &rArr; sendSDO &rArr; canSend &rArr; can_display_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSDO
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;failedSDO
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDOTimeoutAlarm
</UL>

<P><STRONG><a name="[a5]"></a>sendSYNC</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, sync.o(i.sendSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = sendSYNC &rArr; proceedSYNC &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNCMessage
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSYNC
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SyncAlarm
</UL>

<P><STRONG><a name="[ec]"></a>sendSYNCMessage</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, sync.o(i.sendSYNCMessage))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = sendSYNCMessage &rArr; canSend &rArr; can_display_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendSYNC
</UL>

<P><STRONG><a name="[de]"></a>setNodeId</STRONG> (Thumb, 362 bytes, Stack size 40 bytes, states.o(i.setNodeId))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setNodeId
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
</UL>

<P><STRONG><a name="[e4]"></a>setSDOlineRestBytes</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, sdo.o(i.setSDOlineRestBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setSDOlineRestBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedSDO
</UL>

<P><STRONG><a name="[df]"></a>setState</STRONG> (Thumb, 200 bytes, Stack size 24 bytes, states.o(i.setState))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = setState &rArr; switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;proceedNMTstateChange
</UL>

<P><STRONG><a name="[a4]"></a>setTimer</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, main.o(i.setTimer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setTimer
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetTick
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeDispatch
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
</UL>

<P><STRONG><a name="[ee]"></a>slaveSendBootUp</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, nmtslave.o(i.slaveSendBootUp))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = slaveSendBootUp &rArr; canSend &rArr; can_display_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[92]"></a>startSYNC</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, sync.o(i.startSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = startSYNC &rArr; stopSYNC &rArr; RegisterSetODentryCallBack &rArr; scanIndexOD
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetAlarm
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OnCOB_ID_SyncUpdate
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[ef]"></a>stopSYNC</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sync.o(i.stopSYNC))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = stopSYNC &rArr; RegisterSetODentryCallBack &rArr; scanIndexOD
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DelAlarm
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RegisterSetODentryCallBack
</UL>
<BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switchCommunicationState
</UL>

<P><STRONG><a name="[ed]"></a>switchCommunicationState</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, states.o(i.switchCommunicationState))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = switchCommunicationState &rArr; PDOInit &rArr; _sendPDOevent &rArr; sendOnePDOevent &rArr; buildPDO &rArr; _getODentry &rArr; accessDictionaryError
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slaveSendBootUp
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardStop
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lifeGuardInit
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyStop
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;emergencyInit
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stopSYNC
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;startSYNC
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;resetSDO
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOStop
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PDOInit
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setState
</UL>

<P><STRONG><a name="[f1]"></a>usdk_hw_uart_init</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, main.o(i.usdk_hw_uart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = usdk_hw_uart_init &rArr; rs232_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rs232_init
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usdk_startup
</UL>

<P><STRONG><a name="[8b]"></a>usdk_startup</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, autoinit.o(i.usdk_startup))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = usdk_startup &rArr; usdk_hw_uart_init &rArr; rs232_init &rArr; USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;usdk_hw_uart_init
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dwt_init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>writeNetworkDict</STRONG> (Thumb, 54 bytes, Stack size 64 bytes, sdo.o(i.writeNetworkDict))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = writeNetworkDict &rArr; _writeNetworkDict &rArr; sendSDO &rArr; canSend &rArr; can_display_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writeNetworkDict
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;$Super$$main
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[a7]"></a>SetSysClock</STRONG> (Thumb, 220 bytes, Stack size 12 bytes, system_stm32f4xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[7e]"></a>key_init</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, key.o(i.key_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = key_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> key.o(.usdk.init1)
</UL>
<P><STRONG><a name="[7f]"></a>led_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = led_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHB1PeriphClockCmd
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> led.o(.usdk.init1)
</UL>
<P><STRONG><a name="[7d]"></a>system_begin</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, autoinit.o(i.system_begin))
<BR>[Address Reference Count : 1]<UL><LI> autoinit.o(.usdk.init0)
</UL>
<P><STRONG><a name="[81]"></a>system_end</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, autoinit.o(i.system_end))
<BR>[Address Reference Count : 1]<UL><LI> autoinit.o(.usdk.init9)
</UL>
<P><STRONG><a name="[80]"></a>display_build_time</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, buildtime.o(i.display_build_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = display_build_time &rArr; get_build_time &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_build_time
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> buildtime.o(.usdk.init2)
</UL>
<P><STRONG><a name="[b2]"></a>sendPdo</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pdo.o(i.sendPdo))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = sendPdo &rArr; canSend &rArr; can_display_msg &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;canSend
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sendOnePDOevent
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sendPDOevent
</UL>

<P><STRONG><a name="[aa]"></a>_printf_core</STRONG> (Thumb, 984 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[b0]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[af]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
